import { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { useAuthenticator } from '@aws-amplify/ui-react';

//Import helpers 
import { getUsersCategories } from '../helpers/getUsersCategories';
import { getUserRecipesByCategory } from '../helpers/getUserRecipesByCategory';

//Import loading modal
import GenericLoadingModal from "./modals/GenericLoadingModal"

/**
 * The component contains the logged in users homepage
 */
export default function UserHome() {

    /**
     * ==========================
     * Get the users categories
     * ==========================
     */

    //Get the user ID
    const { user } = useAuthenticator(context => [context.user]);
    const userID = user.userId;

    //State variable to hold the users categories
    const [categories, setCategories] = useState(null);

    //Call to set the categories once the users ID is fetched
    useEffect(() => {

        //If there is no userID, stop the process
        if (!userID) return;

        //Fetch the users categories
        const fetchCategories = async () => {
            try {
                const data = await getUsersCategories(userID);

                //Set the results to the categories state variable
                setCategories(data.Items);
            } catch (error) {
                console.log(error);
            }
        }

        fetchCategories()
    }, [userID]);

    /**
     * =======================================================
     * Get the recipes associated with the selected category
     * =======================================================
     */

    
    //State variable to hold the selected user category
    const [categoryID, setCategoryID] = useState(null);

    //State to hold the currently selected category. The initial state is welcome.
    const [currentCategory, setCurrentCategory] = useState("Welcome");

    /**
     * This function runs when a user clicks a category from their
     * category menu. It sets the current category name to be displayed,
     * and also sets the categoryID to update the list of recipes to display.
     */
    const changeCategory = (category, categoryID) => {

        //Set the current category state variable
        setCurrentCategory(category);

        //Set the categoryID for the current category
        setCategoryID(categoryID);
    }

    //State variable to hold recipes for a selected category
    const [recipes, setRecipes] = useState([]);

    //Call to set the recipes once the users ID is fetched
    useEffect(() => {

        //If there is no user/userID, stop the process
        if (!userID) return;

        //Fetch the recipes associated with the selected category
        const fetchRecipes = async () => {
            try {
                const data = await getUserRecipesByCategory(userID, categoryID);

                //Set the recipes state variable to the results
                setRecipes(data.Items);

            } catch (error) {
                console.log(error);
            }
        }

        fetchRecipes()
    }, [userID, categoryID]);

    /**
     * ===================================================
     * Toggle the categories navigation open and closed
     * for small screens/mobile devices. This code was 
     * generated by ChatGPT.
     * ===================================================
     */
    const navRef = useRef(null);
    const modalRef = useRef(null);

    useEffect(() => {

        if (!categories) return;

        const handleClick = () => {
            navRef.current?.classList.toggle("open");
            modalRef.current?.classList.toggle("open");
        };

        const toggleDropdown = document.querySelector(".dropdownToggle");
        toggleDropdown?.addEventListener("click", handleClick);
        return () => toggleDropdown?.removeEventListener("click", handleClick);
    }, [categories]);

    /**
     * ==================
     * Content display
     * ==================
     */

    /**
     * If there are no categories, display a loading spinner to the user
     * while they are fetched
     */
    if (!categories) {
        return <main className="mainContentContainer"><GenericLoadingModal /></main>;
    }

    /**
     * Main content of the page
     */
    return (
        <main className="mainContentContainer userHome">

            {/* Category navication */}
            <aside className="categoryNavigation">
                <div className="dropdownToggle">Categories âŒ„</div>

                <ul className="categoryList" ref={navRef}>
                    {categories.map((category, index) => (
                        <li className="defaultButton userHomeCategoryButton" key={index} onClick={() => changeCategory(category.category, category.categoryID)}>{category.category}</li>
                    ))}
                    <li className="defaultButton userHomeCategoryButton buttonGreen"><Link to="/manage-categories">Manage Categories</Link></li>
                </ul>
            </aside>

            <div className="navigationBackground" ref={modalRef}></div>

            <section id="userHomeMainContent">

                {/* Link to create a new recipe */}
                <Link className="defaultButton buttonGreen createRecipeHomeButton" to="/create-recipe">Create New Recipe +</Link>

                <h2>{currentCategory}</h2>

                {/* Set the welcome or header message that the user sees */}
                {
                    currentCategory === "Welcome" ? ( 
                        categories === null || categories.length === 0 ?
                        <p className="userHomeGreeting">Welcome to MyCookbook! It looks like you haven't created any categories. In order to create a recipe in MyCookbook, you must have a category created to assign the recipe to. Click the Manage Categories button in the categories navigation, or choose Categories in the main navigation at the top of the site to create a category and start creating recipes</p> :
                        <p className="userHomeGreeting">Welcome. Please choose a category to view your recipes!</p>
                    ) :
                    recipes.length === 0 ? <p className="userHomeGreeting">No recipes found for this category. Choose another category or create a new recipe!</p> :
                    recipes.map((recipe, index) => (
                            <article className="recipeCard" key={index}>
                                <h3>{recipe.name}</h3>
                                <p className="recipeCardDescription">{recipe.description}</p>

                                <Link className="defaultButton buttonBlue recipeCardButton" to={`/recipe/${recipe.recipeID}`}>View Recipe</Link>
                            </article>
                        ))
                }
            </section>
        </main>
    )

}